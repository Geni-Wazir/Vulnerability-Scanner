from datetime import datetime
from scanner import db, login_manager
from flask_login import UserMixin

@login_manager.user_loader
def user_loader(user_id):
    return User.query.get(int(user_id))



class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(100), unique=True, nullable=False)
    username = db.Column(db.String(20), unique=True, nullable=False)
    isadmin = db.Column(db.Boolean, nullable=False, default=False)
    profile_image = db.Column(db.String(25), nullable=False, default='profile.jpg')
    password = db.Column(db.String(60), nullable=False)
    scan_available = db.Column(db.Integer, nullable=False, default=0)
    audit = db.relationship('Audit', backref='Auditor', lazy=True, cascade="all, delete")

    def __repr__(self):
        return "User('{}', '{}', '{}', '{}')".format(self.username, self.email, self.profile_image, self.scan_available)




class Audit(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    audit_name = db.Column(db.String(100), unique=True, nullable=False)
    audit_url = db.Column(db.String(100), nullable=False)
    status = db.Column(db.String(100), nullable=False, default='Not started')
    audit_date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    nmap = db.Column(db.Boolean, nullable=False, default=True)
    dirsearch = db.Column(db.Boolean, nullable=False, default=True)
    header = db.Column(db.Boolean, nullable=False, default=True)
    testssl = db.Column(db.Boolean, nullable=False, default=True)
    result = db.relationship('ScanResult', backref='audit_result', lazy=True, cascade="all, delete")

    

    def __repr__(self):
        return "Audit('{}', '{}', '{}', '{}')".format(self.audit_name, self.audit_url, self.audit_date, self.status)




class ScanResult(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    audit_id = db.Column(db.Integer, db.ForeignKey('audit.id'))
    nmap = db.Column(db.Text)
    nmap_status = db.Column(db.String(100), nullable=False, default='Not Scanned')
    nmap_errors = db.Column(db.Text)
    vulnerabilities = db.Column(db.Text)
    vulnerabilities_status = db.Column(db.String(100), nullable=False, default='Not Scanned')
    vulnerabilities_errors = db.Column(db.Text)
    ciphers = db.Column(db.Text)
    ciphers_status = db.Column(db.String(100), nullable=False, default='Not Scanned')
    ciphers_errors = db.Column(db.Text)
    slowris = db.Column(db.Text)
    slowris_status = db.Column(db.String(100), nullable=False, default='Not Scanned')
    slowris_errors = db.Column(db.Text)
    dirsearch = db.Column(db.Text)
    dirsearch_status = db.Column(db.String(100), nullable=False, default='Not Scanned')
    dirsearch_errors = db.Column(db.Text)
    headers = db.Column(db.Text)
    headers_status = db.Column(db.String(100), nullable=False, default='Not Scanned')
    headers_errors = db.Column(db.Text)
    testssl = db.Column(db.Text)
    testssl_status = db.Column(db.String(100), nullable=False, default='Not Scanned')
    testssl_errors = db.Column(db.Text)
    
    
    
    def __repr__(self):
        return "ScanResult('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}')"\
            .format(
                        self.nmap, self.nmap_status, self.nmap_errors,
                        self.vulnerabilities, self.vulnerabilities_status, self.vulnerabilities_errors,
                        self.ciphers, self.ciphers_status, self.ciphers_errors,
                        self.slowris, self.slowris_status, self.slowris_errors,
                        self.dirsearch, self.dirsearch_status, self.dirsearch_errors,
                        self.headers, self.headers_status, self.headers_errors,
                        self.testssl, self.testssl_status, self.testssl_errors,
                        )


