from flask_wtf import FlaskForm
from flask_login import current_user
from wtforms import StringField, PasswordField, SubmitField, BooleanField, TextAreaField, SelectField
from flask_wtf.file import FileField, FileAllowed
from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError, URL
from scanner.model import Audit, User





class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=3, max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired(), Length(min=8)])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Sign Up')

    def validate_username(self, username):
        excluded_chars = " *?!'^+%&/()=}][{$#"
        for char in self.username.data:
            if char in excluded_chars:
                raise ValidationError(f"Character {char} is not allowed in username.")
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('This username is already taken.')
        

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user:
            raise ValidationError('This email is already taken.')




class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember = BooleanField('Remember Me')
    submit = SubmitField('Log In')




class UpdateAccountForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=3, max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    picture = FileField('Update Profile Picture', validators=[FileAllowed(['jpg', 'png'])])
    submit = SubmitField('Update')

    def validate_username(self, username):
        if username.data != current_user.username:
            excluded_chars = " *?!'^+%&/()=}][{$#"
            for char in self.username.data:
                if char in excluded_chars:
                    raise ValidationError(f"Character {char} is not allowed in username.")
            user = User.query.filter_by(username=username.data).first()
            if user:
                raise ValidationError('This username is already taken.')
        

    def validate_email(self, email):
        if email.data != current_user.email:
            user = User.query.filter_by(email=email.data).first()
            if user:
                raise ValidationError('This email is already taken.')


class AuditForm(FlaskForm):
    name = StringField('Project Name', validators=[DataRequired(), Length(min=3, max=50)])
    scope = StringField('Scoup URL', validators=[DataRequired(), Length(max=100), URL()])
    nmap_scan = BooleanField('Nmap Scan', default=True)
    testssl_scan = BooleanField('Testssl Scan', default=True)
    dirsearch_scan = BooleanField('Dirsearch Scan', default=True)
    headers = BooleanField('Headers Scan', default=True)
    submit = SubmitField('Add Audit')

    def validate_name(self, name):
        excluded_chars = " *?!'^+%&/()=}][{$#"
        for char in self.name.data:
            if char in excluded_chars:
                raise ValidationError(f"Character {char} is not allowed in username.")
        audit = Audit.query.filter_by(audit_name=name.data).first()
        if audit:
            raise ValidationError('Audit name exist.')


class UpdateAuditForm(FlaskForm):
    name = StringField('Project Name', validators=[DataRequired(), Length(min=3, max=50)])
    scope = StringField('Scoup URL', validators=[DataRequired(), Length(max=100), URL()])
    nmap_scan = BooleanField('Nmap Scan', default=True)
    testssl_scan = BooleanField('Testssl Scan', default=True)
    dirsearch_scan = BooleanField('Dirsearch Scan', default=True)
    headers = BooleanField('Headers Scan', default=True)
    submit = SubmitField('Update Audit')

