import secrets
import os
from PIL import Image
from scanner import app, db, bcrypt, admin, get_admin, migrate, mail
from flask import flash, render_template, redirect, url_for, request
from flask_admin.contrib.sqla import ModelView
from flask_login import login_user, current_user, logout_user, login_required
from scanner.forms import LoginForm, RegistrationForm, UpdateAccountForm, UpdateAuditForm, AuditForm
from scanner.model import User, Audit, ScanResult
from flask_mail import Message
import docker


client = docker.DockerClient(base_url="unix://var/run/docker.sock")
app.app_context().push()
db.create_all()


admins_list = get_admin()

class ScannerAdminView(ModelView):
    def is_accessible(self):
        if current_user.email in admins_list:
            return True
        else:
            return False

admin.add_view(ScannerAdminView(User, db.session))
admin.add_view(ScannerAdminView(Audit, db.session))
admin.add_view(ScannerAdminView(ScanResult, db.session))
        
def start_scan(url, email, name, nmap, header, testssl, dirsearch):

    command="python3 scanner.py -url {} -email {} -name {} -nmap {} -headers {} -testssl {} -dirsearch {}".format(url, email, name, nmap, header, testssl, dirsearch)
    new = client.containers.run("scanner", name=name, command=command, network="vulnerability-scanner_default", detach=True)





def save_pictures(form_pictures):
    random_hex = secrets.token_hex(10)
    _, f_ext = os.path.splitext(form_pictures.filename)
    picture_fn = random_hex + f_ext
    picture_path = os.path.join(app.root_path, 'static/profile_pics', picture_fn)
    output_size = (125, 125)
    i = Image.open(form_pictures)
    i.thumbnail(output_size)
    i.save(picture_path)
    return picture_fn


def send_email(user):
    msg = Message('Test mail', sender='noreply@demo.com', recipients=[user.email])
    msg.body = f'''Woooooooooooooooooo'''
    mail.send(msg)


@app.route("/")
def home():
    return redirect(url_for('profile'))




@app.route("/register", methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('audits'))
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        if form.email.data in admins_list:
            user = User(email=form.email.data, username=form.username.data, password = hashed_password, isadmin=True)
        else:
            user = User(email=form.email.data, username=form.username.data, password = hashed_password)
        db.session.add(user)
        db.session.commit()
        flash(f'Account created for {form.username.data}', 'success')
        return redirect(url_for('login'))
    return render_template('register.html', form=form, title='Register')




@app.route("/profile", methods=['GET', 'POST'])
@login_required
def profile():
    form = UpdateAccountForm()
    if form.validate_on_submit():
        if form.picture.data:
            picture_file = save_pictures(form.picture.data)
            current_user.profile_image = picture_file
        current_user.username = form.username.data
        current_user.email = form.email.data
        db.session.commit()
        flash('Your Account has been updated!', 'success')
        return redirect(url_for('profile'))
    elif request.method == 'GET':
        form.username.data = current_user.username
        form.email.data = current_user.email
    image_file = url_for('static', filename='profile_pics/' + current_user.profile_image)
    return render_template('profile.html', title='Profile', image_file=image_file, form=form)





@app.route("/login", methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('audits'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('audits'))
        else:
            flash(f'Login Unsuccessful. Please check Email and Password', 'danger')
    return render_template('login.html', form=form, title='Login')





@app.route("/logout")
def logout():
    logout_user()
    return redirect(url_for('login'))





@app.route('/audits', methods=['GET', 'POST'])
@login_required
def audits():
    page = request.args.get('page', 1, type=int)
    q = request.args.get('q')
    if q == "Scanned":
        audits = Audit.query.filter_by(Auditor = current_user).filter_by(status='Scanned').order_by(Audit.audit_date.desc()).paginate(page=page, per_page=12)
    elif q == "Scanning":
        audits = Audit.query.filter_by(Auditor = current_user).filter_by(status='Scanning').order_by(Audit.audit_date.desc()).paginate(page=page, per_page=12)
    elif q == "Not Started":
        audits = Audit.query.filter_by(Auditor = current_user).filter_by(status='Not started').order_by(Audit.audit_date.desc()).paginate(page=page, per_page=12)
    elif q:
        audits = Audit.query.filter_by(Auditor = current_user).filter(Audit.audit_name.contains(q)).order_by(Audit.audit_date.desc()).paginate(page=page, per_page=12)
    else:
        audits = Audit.query.filter_by(Auditor = current_user).order_by(Audit.audit_date.desc()).paginate(page=page, per_page=12)
    return render_template('audits.html', title="Audits", audits=audits)




@app.route('/audits/new', methods=['GET', 'POST'])
@login_required
def new_audit():
    form = AuditForm()
    if form.validate_on_submit():
        if form.nmap_scan.data or form.testssl_scan.data or form.dirsearch_scan.data or form.headers.data:
            audit = Audit(audit_name=form.name.data, audit_url=form.scope.data, nmap=form.nmap_scan.data, testssl=form.testssl_scan.data, dirsearch=form.dirsearch_scan.data, header=form.headers.data, Auditor=current_user)
            db.session.add(audit)
            db.session.commit()
            flash('Your Audit has been created!', 'success')
            return redirect(url_for('audits'))
        else:
            flash('Enable atleaste 1 scan', 'danger')
    return render_template('new_audit.html', title="Add new Audit", form=form, legend="New Audit")




@app.route('/audits/<string:audit_name>')
@login_required
def audit(audit_name):
    audit = Audit.query.filter_by(audit_name=audit_name).first_or_404()
    if audit.Auditor == current_user:   
        return render_template('audit.html', title="Audit - "+audit.audit_name, audit=audit)
    else:
        flash('You don\'t have access to this audit', 'danger')
        return redirect(url_for('audits'))





@app.route('/audits/<string:audit_name>/update', methods=['GET', 'POST'])
@login_required
def update_audit(audit_name):
    audit = Audit.query.filter_by(audit_name=audit_name).first_or_404()
    if audit.Auditor != current_user:
        flash('You don\'t have access to this audit', 'danger')
        return redirect(url_for('audits'))
    form = UpdateAuditForm()
    if audit.status != 'Scanning':
        if form.validate_on_submit():
            if audit.status == 'Not started':
                audit.audit_url=form.scope.data
            if form.nmap_scan.data or form.testssl_scan.data or form.dirsearch_scan.data or form.headers.data:
                audit.nmap=form.nmap_scan.data
                audit.testssl=form.testssl_scan.data
                audit.dirsearch=form.dirsearch_scan.data
                audit.header=form.headers.data
            else:
                flash('Enable atleaste 1 scan', 'danger')
                return redirect(url_for('update_audit', audit_name=audit.audit_name))
            db.session.commit()
            flash('You audit has been Updated', 'success')
            return redirect(url_for('audit', audit_name=audit.audit_name))
        
        elif request.method == 'GET':
            form.name.data = audit.audit_name
            form.scope.data = audit.audit_url
            form.nmap_scan.data = audit.nmap
            form.testssl_scan.data = audit.testssl
            form.dirsearch_scan.data = audit.dirsearch
            form.headers.data = audit.header
    else:
        flash('Can not update the audit. Audit is already Scanned or is in Scanning mode', 'danger')
        return redirect(url_for('audit', audit_name=audit.audit_name))
    return render_template('new_audit.html', title="Audit Update - "+ audit.audit_name, form=form, legend="Update Audit", audit=audit)





@app.route('/audits/<string:audit_name>/delete', methods=['POST'])
@login_required
def delete_audit(audit_name):
    audit = Audit.query.filter_by(audit_name=audit_name).first_or_404()
    if audit.Auditor != current_user:
        flash('You don\'t have access to this audit', 'danger')
        return redirect(url_for('audits'))
    db.session.delete(audit)
    db.session.commit()
    flash('Your audit ' + audit.audit_name + ' has been deleted', 'success')
    return redirect(url_for('audits'))
       



@app.route('/audits/<string:audit_name>/scan', methods=['POST'])
@login_required
def scan_audit(audit_name):
    audit = Audit.query.filter_by(audit_name=audit_name).first_or_404()
    if audit.Auditor != current_user:
        flash('You don\'t have access to this audit', 'danger')
        return redirect(url_for('audits'))
    if audit.status != "Scanning":
        if not audit.nmap and not audit.dirsearch and not audit.header and not audit.testssl:
            flash('None of the scan has been selected', 'danger')
            return redirect(url_for('audits', audit_name=audit.audit_name))
        start_scan(audit.audit_url, current_user.email, audit.audit_name, audit.nmap, audit.header, audit.testssl,  audit.dirsearch)
        audit.status = 'Scanning'
        db.session.commit()
        flash('Scan has been started for ' + audit.audit_name, 'info')
        return redirect(url_for('audits', audit_name=audit.audit_name))
    else:
        flash(audit.audit_name + ' is bring Scanned', 'danger')
        return redirect(url_for('audits'))



@app.route('/report', methods=['POST'])
@login_required
def audit_report(audit_name):
    audit = Audit.query.filter_by(audit_name=audit_name).first_or_404()
    if audit.Auditor != current_user:
        flash('You don\'t have access to this audit', 'danger')
        return redirect(url_for('audits'))
    
    send_email(current_user)
    flash('Your audit ' + audit.audit_name + ' has been deleted', 'success')
    return redirect(url_for('audits'))



@app.route('/scanner/submit', methods=["POST"])
def testpost():
    r = dict(request.form)
    t = r['Audit']
    audit = Audit.query.filter_by(audit_name=t).first()
    scan_result = ScanResult.query.filter_by(audit_result=audit).first()
    if not scan_result:
        scan_result = ScanResult(audit_result=audit)
        db.session.add(scan_result)
        db.session.commit()
    
    status = r['Scan']+'_status'
    setattr(scan_result, r['Scan'], r['Result'])
    setattr(scan_result, status, r['Status'])
    audit.status = r['Audit_status']
    audit = Audit.query.filter_by(audit_name=r['Audit']).first_or_404()
    scan_result = ScanResult.query.filter_by(audit_result=audit).first()
    db.session.commit()

    return '200 ok'
